const express = require('express');
const router = express.Router();
const { pool } = require('../config/db');
const verifyToken = require('../middleware/auth');

// Get chat history for a user
router.get('/history', verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    const [messages] = await pool.query(
      'SELECT * FROM chat_history WHERE user_id = ? ORDER BY created_at ASC',
      [userId]
    );
    
    res.json(messages);
  } catch (error) {
    console.error('Error fetching chat history:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Add a new message to chat history
router.post('/message', verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { message, is_user } = req.body;
    
    if (!message) {
      return res.status(400).json({ message: 'Message content is required' });
    }
    
    const [result] = await pool.query(
      'INSERT INTO chat_history (user_id, message, is_user) VALUES (?, ?, ?)',
      [userId, message, is_user]
    );
    
    res.status(201).json({
      message: 'Message added to chat history',
      messageId: result.insertId
    });
  } catch (error) {
    console.error('Error adding message to chat history:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Clear chat history for a user
router.delete('/history', verifyToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    await pool.query('DELETE FROM chat_history WHERE user_id = ?', [userId]);
    
    res.json({ message: 'Chat history cleared successfully' });
  } catch (error) {
    console.error('Error clearing chat history:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// This route would integrate with an AI service in a production environment
router.post('/ai-response', verifyToken, async (req, res) => {
  try {
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({ message: 'User message is required' });
    }
    
    // In a real application, this would call an AI service API
    // For this demo, we'll return a simple response
    const aiResponse = {
      message: `This is a simulated AI response to: "${message}". In a production environment, this would be generated by an AI service.`,
      timestamp: new Date()
    };
    
    res.json(aiResponse);
  } catch (error) {
    console.error('Error generating AI response:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;